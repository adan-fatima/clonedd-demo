//// [tests/cases/compiler/regularExpressionTypeCheckingReplace.ts] ////

=== regularExpressionTypeCheckingReplace.ts ===
"foo_foo_bar".replace(/foo/g, (match, index, input, ...args) => {
>"foo_foo_bar".replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 0, 31))
>index : Symbol(index, Decl(regularExpressionTypeCheckingReplace.ts, 0, 37))
>input : Symbol(input, Decl(regularExpressionTypeCheckingReplace.ts, 0, 44))
>args : Symbol(args, Decl(regularExpressionTypeCheckingReplace.ts, 0, 51))

    match; // "foo"
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 0, 31))

    index; // number
>index : Symbol(index, Decl(regularExpressionTypeCheckingReplace.ts, 0, 37))

    input; // `${string}foo${string}`
>input : Symbol(input, Decl(regularExpressionTypeCheckingReplace.ts, 0, 44))

    args; // []
>args : Symbol(args, Decl(regularExpressionTypeCheckingReplace.ts, 0, 51))

    return match;
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 0, 31))

});

"foo42_foo24_bar".replace(/foo(\d+)/g, (match, id, index, input, ...args) => {
>"foo42_foo24_bar".replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 8, 40))
>id : Symbol(id, Decl(regularExpressionTypeCheckingReplace.ts, 8, 46))
>index : Symbol(index, Decl(regularExpressionTypeCheckingReplace.ts, 8, 50))
>input : Symbol(input, Decl(regularExpressionTypeCheckingReplace.ts, 8, 57))
>args : Symbol(args, Decl(regularExpressionTypeCheckingReplace.ts, 8, 64))

    match; // `foo${string}`
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 8, 40))

    id; // string
>id : Symbol(id, Decl(regularExpressionTypeCheckingReplace.ts, 8, 46))

    index; // number
>index : Symbol(index, Decl(regularExpressionTypeCheckingReplace.ts, 8, 50))

    input; // `${string}foo${string}`
>input : Symbol(input, Decl(regularExpressionTypeCheckingReplace.ts, 8, 57))

    args; // []
>args : Symbol(args, Decl(regularExpressionTypeCheckingReplace.ts, 8, 64))

    return match;
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 8, 40))

});

"foo42_foo24_bar".replace(/foo(?<id>\d+)/g, (match, id, index, input, capturingGroups, ...args) => {
>"foo42_foo24_bar".replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 17, 45))
>id : Symbol(id, Decl(regularExpressionTypeCheckingReplace.ts, 17, 51))
>index : Symbol(index, Decl(regularExpressionTypeCheckingReplace.ts, 17, 55))
>input : Symbol(input, Decl(regularExpressionTypeCheckingReplace.ts, 17, 62))
>capturingGroups : Symbol(capturingGroups, Decl(regularExpressionTypeCheckingReplace.ts, 17, 69))
>args : Symbol(args, Decl(regularExpressionTypeCheckingReplace.ts, 17, 86))

    match; // `foo${string}`
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 17, 45))

    id; // string
>id : Symbol(id, Decl(regularExpressionTypeCheckingReplace.ts, 17, 51))

    index; // number
>index : Symbol(index, Decl(regularExpressionTypeCheckingReplace.ts, 17, 55))

    input; // `${string}foo${string}`
>input : Symbol(input, Decl(regularExpressionTypeCheckingReplace.ts, 17, 62))

    // for target ≥ ES2018
    capturingGroups.id; // string
>capturingGroups : Symbol(capturingGroups, Decl(regularExpressionTypeCheckingReplace.ts, 17, 69))

    capturingGroups.foo; // error
>capturingGroups : Symbol(capturingGroups, Decl(regularExpressionTypeCheckingReplace.ts, 17, 69))

    args; // []
>args : Symbol(args, Decl(regularExpressionTypeCheckingReplace.ts, 17, 86))

    return match;
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 17, 45))

});

"foo_foo_bar".replace(/foo(?<empty>){0}/g, (match, empty, index, input, capturingGroups, ...args) => {
>"foo_foo_bar".replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 29, 44))
>empty : Symbol(empty, Decl(regularExpressionTypeCheckingReplace.ts, 29, 50))
>index : Symbol(index, Decl(regularExpressionTypeCheckingReplace.ts, 29, 57))
>input : Symbol(input, Decl(regularExpressionTypeCheckingReplace.ts, 29, 64))
>capturingGroups : Symbol(capturingGroups, Decl(regularExpressionTypeCheckingReplace.ts, 29, 71))
>args : Symbol(args, Decl(regularExpressionTypeCheckingReplace.ts, 29, 88))

    match; // "foo"
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 29, 44))

    empty; // "" | undefined
>empty : Symbol(empty, Decl(regularExpressionTypeCheckingReplace.ts, 29, 50))

    index; // number
>index : Symbol(index, Decl(regularExpressionTypeCheckingReplace.ts, 29, 57))

    input; // `${string}foo${string}`
>input : Symbol(input, Decl(regularExpressionTypeCheckingReplace.ts, 29, 64))

    // for target ≥ ES2018
    capturingGroups.empty; // "" | undefined
>capturingGroups : Symbol(capturingGroups, Decl(regularExpressionTypeCheckingReplace.ts, 29, 71))

    capturingGroups.foo; // error
>capturingGroups : Symbol(capturingGroups, Decl(regularExpressionTypeCheckingReplace.ts, 29, 71))

    args; // []
>args : Symbol(args, Decl(regularExpressionTypeCheckingReplace.ts, 29, 88))

    return match;
>match : Symbol(match, Decl(regularExpressionTypeCheckingReplace.ts, 29, 44))

});

