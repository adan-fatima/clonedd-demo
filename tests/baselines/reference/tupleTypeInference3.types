//// [tests/cases/compiler/tupleTypeInference3.ts] ////

=== tupleTypeInference3.ts ===
// Repro from #55632

type InferArg =
>InferArg : InferArg
>         : ^^^^^^^^

  | [1, (a: number) => void]
>a : number
>  : ^^^^^^

  | [2, (b: string) => void];
>b : string
>  : ^^^^^^

const arg: InferArg = [1, (a) => { }];
>arg : InferArg
>    : ^^^^^^^^
>[1, (a) => { }] : [1, (a: number) => void]
>                : ^^^^^ ^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { } : (a: number) => void
>           : ^ ^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^

// More tests

type T1 = [1, (a: number) => void];
>T1 : T1
>   : ^^
>a : number
>  : ^^^^^^

type T2 = { 0: 1, 1: (a: boolean) => void, 2: number };
>T2 : T2
>   : ^^
>0 : 1
>  : ^
>1 : (a: boolean) => void
>  : ^ ^^       ^^^^^    
>a : boolean
>  : ^^^^^^^
>2 : number
>  : ^^^^^^

type T3 = T1 | T2;
>T3 : T3
>   : ^^

const v31: T3 = [1, (a) => { a === 0 }];
>v31 : T3
>    : ^^
>[1, (a) => { a === 0 }] : [1, (a: number) => void]
>                        : ^^^^^ ^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === 0 } : (a: number) => void
>                   : ^ ^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>a === 0 : boolean
>        : ^^^^^^^
>a : number
>  : ^^^^^^
>0 : 0
>  : ^

const v32: T3 = [1, (a) => { a === true }, 0];
>v32 : T3
>    : ^^
>[1, (a) => { a === true }, 0] : [1, (a: boolean) => void, number]
>                              : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === true } : (a: boolean) => void
>                      : ^ ^^^^^^^^^^^^^^^^^^
>a : boolean
>  : ^^^^^^^
>a === true : boolean
>           : ^^^^^^^
>a : boolean
>  : ^^^^^^^
>true : true
>     : ^^^^
>0 : 0
>  : ^

const v33: T3 = [1, (a) => { a === true }, 0, 0]; // Error
>v33 : T3
>    : ^^
>[1, (a) => { a === true }, 0, 0] : [1, (a: any) => void, number, number]
>                                 : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === true } : (a: any) => void
>                      : ^ ^^^^^^^^^^^^^^
>a : any
>  : ^^^
>a === true : boolean
>           : ^^^^^^^
>a : any
>  : ^^^
>true : true
>     : ^^^^
>0 : 0
>  : ^
>0 : 0
>  : ^

const v34: T3 = [1, (a: boolean) => { a === true }]; // Error
>v34 : T3
>    : ^^
>[1, (a: boolean) => { a === true }] : [1, (a: boolean) => void]
>                                    : ^^^^^ ^^       ^^^^^^^^^^
>1 : 1
>  : ^
>(a: boolean) => { a === true } : (a: boolean) => void
>                               : ^ ^^       ^^^^^^^^^
>a : boolean
>  : ^^^^^^^
>a === true : boolean
>           : ^^^^^^^
>a : boolean
>  : ^^^^^^^
>true : true
>     : ^^^^

type T4 = T3 | [2, (b: string) => void]
>T4 : T4
>   : ^^
>b : string
>  : ^^^^^^

const v41: T4 = [1, (a) => { a === 0 }];
>v41 : T4
>    : ^^
>[1, (a) => { a === 0 }] : [1, (a: number) => void]
>                        : ^^^^^ ^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === 0 } : (a: number) => void
>                   : ^ ^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>a === 0 : boolean
>        : ^^^^^^^
>a : number
>  : ^^^^^^
>0 : 0
>  : ^

const v42: T4 = [1, (a) => { a === true }, 0];
>v42 : T4
>    : ^^
>[1, (a) => { a === true }, 0] : [1, (a: boolean) => void, number]
>                              : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === true } : (a: boolean) => void
>                      : ^ ^^^^^^^^^^^^^^^^^^
>a : boolean
>  : ^^^^^^^
>a === true : boolean
>           : ^^^^^^^
>a : boolean
>  : ^^^^^^^
>true : true
>     : ^^^^
>0 : 0
>  : ^

const v43: T4 = [2, (a) => { a === "" }];
>v43 : T4
>    : ^^
>[2, (a) => { a === "" }] : [2, (a: string) => void]
>                         : ^^^^^ ^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^

type T5 = T4 | {}
>T5 : T5
>   : ^^

const v52: T5 = [1, (a) => { a === 0 }];
>v52 : T5
>    : ^^
>[1, (a) => { a === 0 }] : [1, (a: number) => void]
>                        : ^^^^^ ^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === 0 } : (a: number) => void
>                   : ^ ^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>a === 0 : boolean
>        : ^^^^^^^
>a : number
>  : ^^^^^^
>0 : 0
>  : ^

const v53: T5 = [1, (a) => { a === true }, 0];
>v53 : T5
>    : ^^
>[1, (a) => { a === true }, 0] : [1, (a: boolean) => void, number]
>                              : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === true } : (a: boolean) => void
>                      : ^ ^^^^^^^^^^^^^^^^^^
>a : boolean
>  : ^^^^^^^
>a === true : boolean
>           : ^^^^^^^
>a : boolean
>  : ^^^^^^^
>true : true
>     : ^^^^
>0 : 0
>  : ^

const v54: T5 = [2, (a) => { a === "" }];
>v54 : T5
>    : ^^
>[2, (a) => { a === "" }] : [2, (a: string) => void]
>                         : ^^^^^ ^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^

type T6 = T1 | { 0: 1, 1: (a: boolean) => void, 2?: number }
>T6 : T6
>   : ^^
>0 : 1
>  : ^
>1 : (a: boolean) => void
>  : ^ ^^       ^^^^^    
>a : boolean
>  : ^^^^^^^
>2 : number | undefined
>  : ^^^^^^^^^^^^^^^^^^

const v61: T6 = [1, (a) => { a === true }, 0];
>v61 : T6
>    : ^^
>[1, (a) => { a === true }, 0] : [1, (a: boolean) => void, number]
>                              : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === true } : (a: boolean) => void
>                      : ^ ^^^^^^^^^^^^^^^^^^
>a : boolean
>  : ^^^^^^^
>a === true : boolean
>           : ^^^^^^^
>a : boolean
>  : ^^^^^^^
>true : true
>     : ^^^^
>0 : 0
>  : ^

const v62: T6 = [1, (a) => { }]; // Error
>v62 : T6
>    : ^^
>[1, (a) => { }] : [1, (a: any) => void]
>                : ^^^^^ ^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { } : (a: any) => void
>           : ^ ^^^^^^^^^^^^^^
>a : any
>  : ^^^

type T7 = [1, (a: number) => void, ...number[]];
>T7 : T7
>   : ^^
>a : number
>  : ^^^^^^

type T8 = T7 | [1, (a: boolean) => void]
>T8 : T8
>   : ^^
>a : boolean
>  : ^^^^^^^

const v81: T8 = [1, (a) => { a === 0 }, 0];
>v81 : T8
>    : ^^
>[1, (a) => { a === 0 }, 0] : [1, (a: number) => void, number]
>                           : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === 0 } : (a: number) => void
>                   : ^ ^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>a === 0 : boolean
>        : ^^^^^^^
>a : number
>  : ^^^^^^
>0 : 0
>  : ^
>0 : 0
>  : ^

const v82: T8 = [1, (a) => { }]; // Error
>v82 : T8
>    : ^^
>[1, (a) => { }] : [1, (a: any) => void]
>                : ^^^^^ ^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { } : (a: any) => void
>           : ^ ^^^^^^^^^^^^^^
>a : any
>  : ^^^

type T9 = [1, (a: number) => void, ...[number, string]] | [1, (b: string) => void, number?];
>T9 : T9
>   : ^^
>a : number
>  : ^^^^^^
>b : string
>  : ^^^^^^

const v91: T9 = [1, (a) => { a === 0 }, 0, ""];
>v91 : T9
>    : ^^
>[1, (a) => { a === 0 }, 0, ""] : [1, (a: number) => void, number, string]
>                               : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === 0 } : (a: number) => void
>                   : ^ ^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>a === 0 : boolean
>        : ^^^^^^^
>a : number
>  : ^^^^^^
>0 : 0
>  : ^
>0 : 0
>  : ^
>"" : ""
>   : ^^

const v92: T9 = [1, (a) => { a === "" }];
>v92 : T9
>    : ^^
>[1, (a) => { a === "" }] : [1, (a: string) => void]
>                         : ^^^^^ ^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^

const v93: T9 = [1, (a) => { a === "" }, 0];
>v93 : T9
>    : ^^
>[1, (a) => { a === "" }, 0] : [1, (a: string) => void, number]
>                            : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^
>0 : 0
>  : ^

type T10 = [1, (a: number) => void, ...[number, string]] | [1, (b: string) => void, number?, string?];
>T10 : T10
>    : ^^^
>a : number
>  : ^^^^^^
>b : string
>  : ^^^^^^

const v101: T10 = [1, (a) => { a === "" }];
>v101 : T10
>     : ^^^
>[1, (a) => { a === "" }] : [1, (a: string) => void]
>                         : ^^^^^ ^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^

const v102: T10 = [1, (a) => { a === "" }, 0];
>v102 : T10
>     : ^^^
>[1, (a) => { a === "" }, 0] : [1, (a: string) => void, number]
>                            : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^
>0 : 0
>  : ^

const v103: T10 = [1, (a) => { }, 0, ""]; // Error
>v103 : T10
>     : ^^^
>[1, (a) => { }, 0, ""] : [1, (a: any) => void, number, string]
>                       : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { } : (a: any) => void
>           : ^ ^^^^^^^^^^^^^^
>a : any
>  : ^^^
>0 : 0
>  : ^
>"" : ""
>   : ^^

type T11 = [1, (a: number) => void, ...[number, string]] | [1, (b: string) => void, number?, boolean?];
>T11 : T11
>    : ^^^
>a : number
>  : ^^^^^^
>b : string
>  : ^^^^^^

const v111: T11 = [1, (a) => { a === "" }];
>v111 : T11
>     : ^^^
>[1, (a) => { a === "" }] : [1, (a: string) => void]
>                         : ^^^^^ ^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^

const v112: T11 = [1, (a) => { a === "" }, 0];
>v112 : T11
>     : ^^^
>[1, (a) => { a === "" }, 0] : [1, (a: string) => void, number]
>                            : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^
>0 : 0
>  : ^

const v113: T11 = [1, (a) => { a === 0 }, 0, ""];
>v113 : T11
>     : ^^^
>[1, (a) => { a === 0 }, 0, ""] : [1, (a: number) => void, number, string]
>                               : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === 0 } : (a: number) => void
>                   : ^ ^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>a === 0 : boolean
>        : ^^^^^^^
>a : number
>  : ^^^^^^
>0 : 0
>  : ^
>0 : 0
>  : ^
>"" : ""
>   : ^^

const v114: T11 = [1, (a) => { a === "" }, 0, true];
>v114 : T11
>     : ^^^
>[1, (a) => { a === "" }, 0, true] : [1, (a: string) => void, number, true]
>                                  : ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>(a) => { a === "" } : (a: string) => void
>                    : ^ ^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a === "" : boolean
>         : ^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^
>0 : 0
>  : ^
>true : true
>     : ^^^^

