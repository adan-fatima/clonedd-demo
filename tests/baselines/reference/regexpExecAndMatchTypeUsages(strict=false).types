//// [tests/cases/compiler/regexpExecAndMatchTypeUsages.ts] ////

=== regexpExecAndMatchTypeUsages.ts ===
export function foo(matchResult: RegExpMatchArray, execResult: RegExpExecArray) {
>foo : (matchResult: RegExpMatchArray, execResult: RegExpExecArray) => void
>    : ^           ^^                ^^          ^^               ^^^^^^^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    matchResult[0].length;
>matchResult[0].length : number
>                      : ^^^^^^
>matchResult[0] : string
>               : ^^^^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>length : number
>       : ^^^^^^

    matchResult[999].length;
>matchResult[999].length : number
>                        : ^^^^^^
>matchResult[999] : string
>                 : ^^^^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>999 : 999
>    : ^^^
>length : number
>       : ^^^^^^

    matchResult.index + 0;
>matchResult.index + 0 : any
>                      : ^^^
>matchResult.index : any
>                  : ^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>index : any
>      : ^^^
>0 : 0
>  : ^

    matchResult.input.length;
>matchResult.input.length : any
>                         : ^^^
>matchResult.input : any
>                  : ^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>input : any
>      : ^^^
>length : any
>       : ^^^

    matchResult.groups["someVariable"].length;
>matchResult.groups["someVariable"].length : any
>                                          : ^^^
>matchResult.groups["someVariable"] : any
>                                   : ^^^
>matchResult.groups : any
>                   : ^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>groups : any
>       : ^^^
>"someVariable" : "someVariable"
>               : ^^^^^^^^^^^^^^
>length : any
>       : ^^^

    matchResult.groups = undefined;
>matchResult.groups = undefined : undefined
>                               : ^^^^^^^^^
>matchResult.groups : any
>                   : ^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>groups : any
>       : ^^^
>undefined : undefined
>          : ^^^^^^^^^

    execResult[0].length;
>execResult[0].length : number
>                     : ^^^^^^
>execResult[0] : string
>              : ^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>length : number
>       : ^^^^^^

    execResult[999].length;
>execResult[999].length : number
>                       : ^^^^^^
>execResult[999] : string
>                : ^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>999 : 999
>    : ^^^
>length : number
>       : ^^^^^^

    execResult.index + 0;
>execResult.index + 0 : number
>                     : ^^^^^^
>execResult.index : number
>                 : ^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>index : number
>      : ^^^^^^
>0 : 0
>  : ^

    execResult.input.length;
>execResult.input.length : number
>                        : ^^^^^^
>execResult.input : string
>                 : ^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>input : string
>      : ^^^^^^
>length : number
>       : ^^^^^^

    execResult.groups["someVariable"].length;
>execResult.groups["someVariable"].length : number
>                                         : ^^^^^^
>execResult.groups["someVariable"] : string
>                                  : ^^^^^^
>execResult.groups : { [name: string]: string; }
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>groups : { [name: string]: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"someVariable" : "someVariable"
>               : ^^^^^^^^^^^^^^
>length : number
>       : ^^^^^^

    execResult.groups = undefined;
>execResult.groups = undefined : undefined
>                              : ^^^^^^^^^
>execResult.groups : { [name: string]: string; }
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>groups : { [name: string]: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

    if (Math.random()) {
>Math.random() : number
>              : ^^^^^^
>Math.random : () => number
>            : ^^^^^^      
>Math : Math
>     : ^^^^
>random : () => number
>       : ^^^^^^      

        matchResult = execResult;
>matchResult = execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    else {
        execResult = matchResult
>execResult = matchResult : RegExpMatchArray<CapturingGroupsArray>
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>execResult : RegExpExecArray<CapturingGroupsArray, { [name: string]: string; }, RegExpFlags>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>matchResult : RegExpMatchArray<CapturingGroupsArray>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
}

