//// [tests/cases/conformance/controlFlow/controlFlowOptionalChain4.ts] ////

=== controlFlowOptionalChain4.ts ===
// https://github.com/microsoft/TypeScript/issues/56998

type Type = {
>Type : Symbol(Type, Decl(controlFlowOptionalChain4.ts, 0, 0))

  id: number;
>id : Symbol(id, Decl(controlFlowOptionalChain4.ts, 2, 13))

};

type InferenceInfo = {
>InferenceInfo : Symbol(InferenceInfo, Decl(controlFlowOptionalChain4.ts, 4, 2))

  typeParameter: Type;
>typeParameter : Symbol(typeParameter, Decl(controlFlowOptionalChain4.ts, 6, 22))
>Type : Symbol(Type, Decl(controlFlowOptionalChain4.ts, 0, 0))

  impliedArity?: number;
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))

};

declare function getInferenceInfoForType(type: Type): InferenceInfo | undefined;
>getInferenceInfoForType : Symbol(getInferenceInfoForType, Decl(controlFlowOptionalChain4.ts, 9, 2))
>type : Symbol(type, Decl(controlFlowOptionalChain4.ts, 11, 41))
>Type : Symbol(Type, Decl(controlFlowOptionalChain4.ts, 0, 0))
>InferenceInfo : Symbol(InferenceInfo, Decl(controlFlowOptionalChain4.ts, 4, 2))

function fn1(t1: Type, t2: Type) {
>fn1 : Symbol(fn1, Decl(controlFlowOptionalChain4.ts, 11, 80))
>t1 : Symbol(t1, Decl(controlFlowOptionalChain4.ts, 13, 13))
>Type : Symbol(Type, Decl(controlFlowOptionalChain4.ts, 0, 0))
>t2 : Symbol(t2, Decl(controlFlowOptionalChain4.ts, 13, 22))
>Type : Symbol(Type, Decl(controlFlowOptionalChain4.ts, 0, 0))

  let info = getInferenceInfoForType(t1);
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 14, 5))
>getInferenceInfoForType : Symbol(getInferenceInfoForType, Decl(controlFlowOptionalChain4.ts, 9, 2))
>t1 : Symbol(t1, Decl(controlFlowOptionalChain4.ts, 13, 13))

  if (info?.impliedArity !== undefined) {
>info?.impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 14, 5))
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>undefined : Symbol(undefined)

    info.impliedArity;
>info.impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 14, 5))
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))

  } else if ((info = getInferenceInfoForType(t2))?.impliedArity !== undefined) {
>(info = getInferenceInfoForType(t2))?.impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 14, 5))
>getInferenceInfoForType : Symbol(getInferenceInfoForType, Decl(controlFlowOptionalChain4.ts, 9, 2))
>t2 : Symbol(t2, Decl(controlFlowOptionalChain4.ts, 13, 22))
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>undefined : Symbol(undefined)

    info.impliedArity;
>info.impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 14, 5))
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
  }
}

function fn2(t1: Type, t2: Type) {
>fn2 : Symbol(fn2, Decl(controlFlowOptionalChain4.ts, 20, 1))
>t1 : Symbol(t1, Decl(controlFlowOptionalChain4.ts, 22, 13))
>Type : Symbol(Type, Decl(controlFlowOptionalChain4.ts, 0, 0))
>t2 : Symbol(t2, Decl(controlFlowOptionalChain4.ts, 22, 22))
>Type : Symbol(Type, Decl(controlFlowOptionalChain4.ts, 0, 0))

  let info = getInferenceInfoForType(t1);
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 23, 5))
>getInferenceInfoForType : Symbol(getInferenceInfoForType, Decl(controlFlowOptionalChain4.ts, 9, 2))
>t1 : Symbol(t1, Decl(controlFlowOptionalChain4.ts, 22, 13))

  if (info?.impliedArity !== undefined) {
>info?.impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 23, 5))
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>undefined : Symbol(undefined)

    info.impliedArity;
>info.impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 23, 5))
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))

  } else if ((info = getInferenceInfoForType(t2))?.impliedArity) {
>(info = getInferenceInfoForType(t2))?.impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 23, 5))
>getInferenceInfoForType : Symbol(getInferenceInfoForType, Decl(controlFlowOptionalChain4.ts, 9, 2))
>t2 : Symbol(t2, Decl(controlFlowOptionalChain4.ts, 22, 22))
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))

    info.impliedArity;
>info.impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
>info : Symbol(info, Decl(controlFlowOptionalChain4.ts, 23, 5))
>impliedArity : Symbol(impliedArity, Decl(controlFlowOptionalChain4.ts, 7, 22))
  }
}

