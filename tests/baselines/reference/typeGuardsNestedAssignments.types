//// [tests/cases/conformance/controlFlow/typeGuardsNestedAssignments.ts] ////

=== typeGuardsNestedAssignments.ts ===
class Foo {
>Foo : Foo
>    : ^^^

    x: string;
>x : string
>  : ^^^^^^
}

declare function getFooOrNull(): Foo | null;
>getFooOrNull : () => Foo | null
>             : ^^^^^^          

declare function getStringOrNumberOrNull(): string | number | null;
>getStringOrNumberOrNull : () => string | number | null
>                        : ^^^^^^                      

function f1() {
>f1 : () => void
>   : ^^^^^^^^^^

    let foo: Foo | null;
>foo : Foo | null
>    : ^^^^^^^^^^

    if ((foo = getFooOrNull()) !== null) {
>(foo = getFooOrNull()) !== null : boolean
>                                : ^^^^^^^
>(foo = getFooOrNull()) : Foo | null
>                       : ^^^^^^^^^^
>foo = getFooOrNull() : Foo | null
>                     : ^^^^^^^^^^
>foo : Foo | null
>    : ^^^^^^^^^^
>getFooOrNull() : Foo | null
>               : ^^^^^^^^^^
>getFooOrNull : () => Foo | null
>             : ^^^^^^          

        foo;  // Foo
>foo : Foo
>    : ^^^
    }
}

function f2() {
>f2 : () => void
>   : ^^^^^^^^^^

    let foo1: Foo | null;
>foo1 : Foo | null
>     : ^^^^^^^^^^

    let foo2: Foo | null;
>foo2 : Foo | null
>     : ^^^^^^^^^^

    if ((foo1 = getFooOrNull(), foo2 = foo1) !== null) {
>(foo1 = getFooOrNull(), foo2 = foo1) !== null : boolean
>                                              : ^^^^^^^
>(foo1 = getFooOrNull(), foo2 = foo1) : Foo | null
>                                     : ^^^^^^^^^^
>foo1 = getFooOrNull(), foo2 = foo1 : Foo | null
>                                   : ^^^^^^^^^^
>foo1 = getFooOrNull() : Foo | null
>                      : ^^^^^^^^^^
>foo1 : Foo | null
>     : ^^^^^^^^^^
>getFooOrNull() : Foo | null
>               : ^^^^^^^^^^
>getFooOrNull : () => Foo | null
>             : ^^^^^^          
>foo2 = foo1 : Foo | null
>            : ^^^^^^^^^^
>foo2 : Foo | null
>     : ^^^^^^^^^^
>foo1 : Foo | null
>     : ^^^^^^^^^^

        foo1;  // Foo | null
>foo1 : Foo | null
>     : ^^^^^^^^^^

        foo2;  // Foo
>foo2 : Foo
>     : ^^^
    }
}

function f3() {
>f3 : () => void
>   : ^^^^^^^^^^

    let obj: Object | null;
>obj : Object | null
>    : ^^^^^^^^^^^^^

    if ((obj = getFooOrNull()) instanceof Foo) {
>(obj = getFooOrNull()) instanceof Foo : boolean
>                                      : ^^^^^^^
>(obj = getFooOrNull()) : Foo | null
>                       : ^^^^^^^^^^
>obj = getFooOrNull() : Foo | null
>                     : ^^^^^^^^^^
>obj : Object | null
>    : ^^^^^^^^^^^^^
>getFooOrNull() : Foo | null
>               : ^^^^^^^^^^
>getFooOrNull : () => Foo | null
>             : ^^^^^^          
>Foo : typeof Foo
>    : ^^^^^^^^^^

        obj;
>obj : Foo
>    : ^^^
    }
}

function f4() {
>f4 : () => void
>   : ^^^^^^^^^^

    let x: string | number | null;
>x : string | number | null
>  : ^^^^^^^^^^^^^^^^^^^^^^

    if (typeof (x = getStringOrNumberOrNull()) === "number") {
>typeof (x = getStringOrNumberOrNull()) === "number" : boolean
>                                                    : ^^^^^^^
>typeof (x = getStringOrNumberOrNull()) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(x = getStringOrNumberOrNull()) : string | number | null
>                                : ^^^^^^^^^^^^^^^^^^^^^^
>x = getStringOrNumberOrNull() : string | number | null
>                              : ^^^^^^^^^^^^^^^^^^^^^^
>x : string | number | null
>  : ^^^^^^^^^^^^^^^^^^^^^^
>getStringOrNumberOrNull() : string | number | null
>                          : ^^^^^^^^^^^^^^^^^^^^^^
>getStringOrNumberOrNull : () => string | number | null
>                        : ^^^^^^                      
>"number" : "number"
>         : ^^^^^^^^

        x;
>x : number
>  : ^^^^^^
    }
}

// Repro from #8851

const re = /./g
>re : RegExp<[string], undefined, { hasIndices: false; global: true; ignoreCase: false; multiline: false; dotAll: false; unicode: false; unicodeSets: false; sticky: false; }>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>/./g : RegExp<[string], undefined, { hasIndices: false; global: true; ignoreCase: false; multiline: false; dotAll: false; unicode: false; unicodeSets: false; sticky: false; }>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

let match: RegExpExecArray | null
>match : RegExpExecArray<CapturingGroupsArray, NamedCapturingGroupsObject, RegExpFlags> | null
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

while ((match = re.exec("xxx")) != null) {
>(match = re.exec("xxx")) != null : boolean
>                                 : ^^^^^^^
>(match = re.exec("xxx")) : RegExpExecArray<[string], undefined, { hasIndices: false; global: true; ignoreCase: false; multiline: false; dotAll: false; unicode: false; unicodeSets: false; sticky: false; }> | null
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>match = re.exec("xxx") : RegExpExecArray<[string], undefined, { hasIndices: false; global: true; ignoreCase: false; multiline: false; dotAll: false; unicode: false; unicodeSets: false; sticky: false; }> | null
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>match : RegExpExecArray<CapturingGroupsArray, NamedCapturingGroupsObject, RegExpFlags> | null
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>re.exec("xxx") : RegExpExecArray<[string], undefined, { hasIndices: false; global: true; ignoreCase: false; multiline: false; dotAll: false; unicode: false; unicodeSets: false; sticky: false; }> | null
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>re.exec : (string: string) => RegExpExecArray<[string], undefined, { hasIndices: false; global: true; ignoreCase: false; multiline: false; dotAll: false; unicode: false; unicodeSets: false; sticky: false; }> | null
>        : ^      ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>re : RegExp<[string], undefined, { hasIndices: false; global: true; ignoreCase: false; multiline: false; dotAll: false; unicode: false; unicodeSets: false; sticky: false; }>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>exec : (string: string) => RegExpExecArray<[string], undefined, { hasIndices: false; global: true; ignoreCase: false; multiline: false; dotAll: false; unicode: false; unicodeSets: false; sticky: false; }> | null
>     : ^      ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"xxx" : "xxx"
>      : ^^^^^

    const length = match[1].length + match[2].length
>length : number
>       : ^^^^^^
>match[1].length + match[2].length : number
>                                  : ^^^^^^
>match[1].length : number
>                : ^^^^^^
>match[1] : string | undefined
>         : ^^^^^^^^^^^^^^^^^^
>match : RegExpExecArray<CapturingGroupsArray, NamedCapturingGroupsObject, RegExpFlags>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>length : number
>       : ^^^^^^
>match[2].length : number
>                : ^^^^^^
>match[2] : string | undefined
>         : ^^^^^^^^^^^^^^^^^^
>match : RegExpExecArray<CapturingGroupsArray, NamedCapturingGroupsObject, RegExpFlags>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>length : number
>       : ^^^^^^
}
